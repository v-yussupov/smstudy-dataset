% Encoding: UTF-8

@Article{doi:10.1002/cpe.4792,
  author   = {Figiela, Kamil and Gajek, Adam and Zima, Adam and Obrok, Beata and Malawski, Maciej},
  title    = {Performance evaluation of heterogeneous cloud functions},
  journal  = {Concurrency and Computation: Practice and Experience},
  year     = {2018},
  volume   = {30},
  number   = {23},
  pages    = {e4792},
  note     = {e4792 cpe.4792},
  abstract = {Summary Cloud Functions, often called Function-as-a-Service (FaaS), pioneered by AWS Lambda, are an increasingly popular method of running distributed applications. As in other cloud offerings, cloud functions are heterogeneous due to variations in underlying hardware, runtime systems, as well as resource management and billing models. In this paper, we focus on performance evaluation of cloud functions, taking into account heterogeneity aspects. We developed a cloud function benchmarking framework, consisting of one suite based on Serverless Framework and one based on HyperFlow. We deployed the CPU-intensive benchmarks: Mersenne Twister and Linpack. We measured the data transfer times between cloud functions and storage, and we measured the lifetime of the runtime environment. We evaluated all the major cloud function providers: AWS Lambda, Azure Functions, Google Cloud Functions, and IBM Cloud Functions. We made our results available online and continuously updated. We report on the results of the performance evaluation, and we discuss the discovered insights into resource allocation policies.},
  doi      = {10.1002/cpe.4792},
  eprint   = {https://onlinelibrary.wiley.com/doi/pdf/10.1002/cpe.4792},
  keywords = {cloud computing, cloud functions, FaaS, performance evaluation, serverless},
  url      = {https://onlinelibrary.wiley.com/doi/abs/10.1002/cpe.4792},
}

@Article{doi:10.1002/cpe.5189,
  author   = {Kamburugamuve, Supun and Govindarajan, Kannan and Wickramasinghe, Pulasthi and Abeykoon, Vibhatha and Fox, Geoffrey},
  title    = {Twister2: Design of a big data toolkit},
  journal  = {Concurrency and Computation: Practice and Experience},
  volume   = {0},
  number   = {0},
  pages    = {e5189},
  note     = {e5189 cpe.5189},
  abstract = {Summary Data-driven applications are essential to handle the ever-increasing volume, velocity, and veracity of data generated by sources such as the Web and Internet of Things (IoT) devices. Simultaneously, an event-driven computational paradigm is emerging as the core of modern systems designed for database queries, data analytics, and on-demand applications. Modern big data processing runtimes and asynchronous many task (AMT) systems from high performance computing (HPC) community have adopted dataflow event-driven model. The services are increasingly moving to an event-driven model in the form of Function as a Service (FaaS) to compose services. An event-driven runtime designed for data processing consists of well-understood components such as communication, scheduling, and fault tolerance. Different design choices adopted by these components determine the type of applications a system can support efficiently. We find that modern systems are limited to specific sets of applications because they have been designed with fixed choices that cannot be changed easily. In this paper, we present a loosely coupled component-based design of a big data toolkit where each component can have different implementations to support various applications. Such a polymorphic design would allow services and data analytics to be integrated seamlessly and expand from edge to cloud to HPC environments.},
  doi      = {10.1002/cpe.5189},
  eprint   = {https://onlinelibrary.wiley.com/doi/pdf/10.1002/cpe.5189},
  keywords = {big data, dataflow, event-driven computing, high performance computing},
  url      = {https://onlinelibrary.wiley.com/doi/abs/10.1002/cpe.5189},
}

@Article{doi:10.1002/smr.1930,
  author   = {Plaza, Andrea M. and D�az, Jessica and P�rez, Jennifer},
  title    = {Software architectures for health care cyber-physical systems: A systematic literature review},
  journal  = {Journal of Software: Evolution and Process},
  year     = {2018},
  volume   = {30},
  number   = {7},
  pages    = {e1930},
  note     = {e1930 JSME-16-0265.R3},
  abstract = {Abstract Cyber-physical systems (CPS) refer to the next generation of Information and Communication Technology systems that mainly integrate sensing, computing, and communication to monitor, control, and interact with a physical process to provide citizens and businesses with smart applications and services: health care, smart homes, smart cities, and so on. In recent years, health care has become one of the most important services due to the continuous increases in its costs. This has motivated extensive research on health care CPS, and some of that research has focused on describing the software architecture behind these systems. However, there is no secondary study to consolidate the research. This paper aims to identify and compare existing research on software architectures for health care CPS in order to determine successful solutions that could guide other architects and practitioners in their health care projects. We conducted a systematic literature review and compared the selected studies based on a characterization schema. The research synthesis results in a knowledge base of software architectures for health care CPS, describing their stakeholders, functional and non-functional features, quality attributes architectural views and styles, components, and implementation technologies. This systematic literature review also identifies research gaps, such as the lack of open common platforms, as well as directions for future research.},
  doi      = {10.1002/smr.1930},
  eprint   = {https://onlinelibrary.wiley.com/doi/pdf/10.1002/smr.1930},
  keywords = {cyber-physical systems, health care, Internet of Things, software architecture, systematic literature review},
  url      = {https://onlinelibrary.wiley.com/doi/abs/10.1002/smr.1930},
}

@Comment{jabref-meta: databaseType:bibtex;}

@Comment{jabref-meta: saveOrderConfig:specified;author;false;abstract;false;abstract;false;}
